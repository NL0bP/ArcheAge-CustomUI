function SetViewOfItemIconButton(id, parent)  local button = CreateActionButton(id, parent)  button:SetExtent(ICON_SIZE.DEFAULT, ICON_SIZE.DEFAULT)  button:Show(true)  local back = button:CreateNinePartDrawable(TEXTURE_PATH.HUD, "background")  ApplySlotSkin(button, back, SLOT_STYLE.BAG_DEFAULT)  button.back = back  CreatePackIcon(button)  button.packIcon:AddAnchor("TOPLEFT", button, 0, 0)  button.packIcon:AddAnchor("BOTTOMRIGHT", button, 0, 0)  local overlay = button:CreateColorDrawable(0, 0, 0, 0, "overlay")  overlay:AddAnchor("TOPLEFT", button, 1, 1)  overlay:AddAnchor("BOTTOMRIGHT", button, -1, -1)  button.overlay = overlay  local limitLevel = button:CreateTextDrawable(FONT_PATH.DEFAULT, FONT_SIZE.XLARGE, "overlay")  limitLevel:SetExtent(FONT_SIZE.XLARGE, FONT_SIZE.XLARGE)  limitLevel:SetVisible(false)  limitLevel.style:SetAlign(ALIGN_CENTER)  limitLevel.style:SetShadow(true)  limitLevel:AddAnchor("CENTER", button, 0, 0)  ApplyTextColor(limitLevel, FONT_COLOR.SOFT_RED)  button.limitLevel = limitLevel  CreateDyeingIcon(button)  button.dyeingIcon:AddAnchor("TOPRIGHT", button, -2, 2)  CreateLockIcon(button)  button.lockIcon:AddAnchor("CENTER", button, 0, 0)  CreateLookIcon(button)  button.lookIcon:AddAnchor("BOTTOMLEFT", button, 1, -2)  local stack = button:CreateChildWidget("label", "stack", 0, true)  stack:AddAnchor("BOTTOMRIGHT", button, -4, -9)  stack.style:SetShadow(true)  stack:SetNumberOnly(true)  stack.style:SetAlign(ALIGN_RIGHT)  stack.style:SetFontSize(FONT_SIZE.SMALL)  return buttonendfunction CreateItemIconButton(id, parent)  local button = SetViewOfItemIconButton(id, parent)  function button:SetItemInfo(itemInfo)    self.info = itemInfo    if itemInfo ~= nil then      local type = itemInfo.itemType      if itemInfo.lookType ~= nil and itemInfo.lookType ~= 0 then        type = itemInfo.lookType      end      self:SetItemIcon(type, itemInfo.itemGrade)      self:SetDyeingInfo(info)      self:SetLockInfo(info)    end  end  function button:SetReadingGlassIcon(itemName)    local readingGlassIconBtn = self:CreateChildWidget("button", "readingGlassIconBtn", 0, true)    readingGlassIconBtn:AddAnchor("LEFT", self, "RIGHT", -20, -16)    ApplyButtonSkin(readingGlassIconBtn, BUTTON_CONTENTS.SEARCH_MAGNIFIER)    readingGlassIconBtn:SetWidth(20)    readingGlassIconBtn:Enable(false)    readingGlassIconBtn:Show(false)  end  function button:SetTooltip(info)    self.info = info  end  local function SetLookIcon(info)    button.lookIcon:SetVisible(false)    if info.lookChanged then      button.lookIcon:SetVisible(true)      button.lookIcon:SetCoords(711, 294, 19, 17)      button.lookIcon:SetExtent(19, 17)    end    if info.useAsSkin then      button.lookIcon:SetVisible(true)      button.lookIcon:SetCoords(692, 294, 19, 17)      button.lookIcon:SetExtent(19, 17)    end  end  function button:SetItemIcon(itemType, itemGrade)    self.dyeingIcon:SetVisible(false)    self:SetPackInfo(nil)    if itemType ~= nil and itemGrade ~= nil then      local icons = X2Item:GetItemIconSet(itemType, itemGrade)      if icons ~= nil then        SetItemIcons(self, icons.itemIcon, icons.overIcon, icons.frameIcon)        return      end    end    SetItemIcons(self)  end  function button:SetDyeingInfo(info)    if info == nil then      self.dyeingIcon:SetVisible(false)      self.lookIcon:SetVisible(false)      return    end    SetLookIcon(info)    if info.dyeingType ~= nil then      self.dyeingIcon:SetVisible(true)      local itemInfo = X2Item:GetItemInfoByType(info.dyeingType, 0, IIK_NAME + IIK_DYEING_COLOR)      if itemInfo == nil then        return      end      self.dyeingIcon:SetColor(itemInfo.dyeingRed, itemInfo.dyeingGreen, itemInfo.dyeingBlue, 1)    else      self.dyeingIcon:SetVisible(false)    end  end  function button:SetLockInfo(info)    if info == nil then      self.lockIcon:SetVisible(false)      return    end    if info.securityState == nil then      self.lockIcon:SetVisible(false)      return    end    if info.securityState == ITEM_SECURITY_UNLOCKED then      self.lockIcon:SetVisible(false)      return    end    self.lockIcon:SetVisible(true)    self:SetOverlayColor("black")    if info.securityState == ITEM_SECURITY_LOCKED then      self.lockIcon:SetCoords(822, 399, 23, 30)    elseif info.securityState == ITEM_SECURITY_UNLOCKING then      self.lockIcon:SetCoords(845, 399, 23, 30)    end  end  function button:OnEnter()    if self.procOnEnter ~= nil then      self:procOnEnter()    end    ShowTooltip(self.info, self)	if nil ~= self.readingGlassIconBtn and nil ~= self.info then	  self.readingGlassIconBtn:Enable(true)	  self.readingGlassIconBtn:Show(true)	end  end  button:SetHandler("OnEnter", button.OnEnter)  function button:OnClick(arg)    HideTooltip()    if self.OnClickProc ~= nil then      self:OnClickProc(arg)    end  end  button:SetHandler("OnClick", button.OnClick)  function button:OnLeave()    HideTooltip()    HideTextTooltip()	if nil ~= self.readingGlassIconBtn then	  self.readingGlassIconBtn:Enable(false)	  self.readingGlassIconBtn:Show(false)	end  end  button:SetHandler("OnLeave", button.OnLeave)  button:SetItemIcon(nil)  function button:SetStack(stackCount, size)    if stackCount == nil or stackCount == "" then      self.stack:SetText("")      return    end    if tonumber(stackCount) <= 1 then      self.stack:SetText("")      return    end    if size == nil then      size = FONT_SIZE.SMALL    end    self.stack:SetText(tostring(stackCount))    self.stack.style:SetFont(FONT_PATH.DEFAULT, size)  end  function button:ResetStack()    if self.stack ~= nil then      self.stack:SetText("")    end  end  function button:SetOverlayColor(color)    if color == "red" then      self.overlay:SetColor(ConvertColor(137), ConvertColor(0), ConvertColor(0), 0.6)    elseif color == "green" then      self.overlay:SetColor(ConvertColor(8), ConvertColor(198), ConvertColor(160), 0.5)    elseif color == "yellow" then      self.overlay:SetColor(ConvertColor(198), ConvertColor(165), ConvertColor(34), 0.35)    elseif color == "black" then      self.overlay:SetColor(0, 0, 0, 0.5)    end  end  function button:OverlayInvisible()    local colorTable = self.overlay:GetColor()    if colorTable[4] ~= 0 then      self.overlay:SetColor(0, 0, 0, 0)    end  end  function button:ProcessDurabilityColor(info)    if info == nil then      return    end    local durability = info.durability    local maxDurability = info.maxDurability    if maxDurability == nil or maxDurability == 0 then      return    end    local percent = durability / maxDurability    if 0.25 < percent then      return    end    if 0 < percent then      self:SetOverlayColor("yellow")      return    end    self:SetOverlayColor("red")  end  function button:ProcessRequireLevelCheck(itemType)    if itemType == nil or itemType == 0 then      self.limitLevel:SetVisible(false)      return    end    local requireLevel = X2Item:GetLevelRequirement(itemType) or 0    if requireLevel == 0 then      return    end    local playerLevel = X2Unit:UnitLevel("player")    if playerLevel == nil then      playerLevel = 1    end    self.limitLevel:SetVisible(requireLevel > playerLevel)    if requireLevel > playerLevel then      self.limitLevel:SetText(tostring(requireLevel))      self:SetOverlayColor("black")    else      self:OverlayInvisible()    end  end  function button:Init()    self.info = nil    self:SetItemIcon()    self:SetPackInfo(nil)    self:ResetStack()    HideTooltip()    self.dyeingIcon:SetVisible(false)    self.lookIcon:SetVisible(false)    self.lockIcon:SetVisible(false)    self.limitLevel:SetVisible(false)    self:OverlayInvisible()	if nil ~= self.readingGlassIconBtn then	  self.readingGlassIconBtn:Enable(false)	  self.readingGlassIconBtn:Show(false)	end  end  return buttonend