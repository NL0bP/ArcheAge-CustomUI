Script.ReloadScript("SCRIPTS/x2ui/store/buy_view.lua")local itemTable = {}function CreateStoreBuyFrame(window, cmdWindow)  SetViewOfStoreBuyFrame(window)  local buyList = window.buyList  local pageControl = window.pageControl  local cartList = window.cartList  local spinner = window.spinner  local searchEditbox = cmdWindow.searchEditbox  window.cartBag = {}  local function GetCartEmptySlotNumber()    for i = 1, #window.cartBag do      local bag = window.cartBag[i]      if bag[1] == nil then        return i      end    end    return "full"  end  local function UseSpinner(itemInfo, maxStack)    spinner:Show(true)    spinner:SetMinMaxValues(1, maxStack)    spinner.itemInfo = itemInfo  end  local ChangedCartItemInfo = function(bag, item, count)    item:SetStack(tostring(count))    bag[2] = count  end  function cartList:Init()    local maxItem = STORE_MAX_CART_COL * STORE_MAX_CART_ROW    for i = 1, maxItem do      local item = cartList[i]      item.itemIndex = nil      item:Init()      window.cartBag[i] = {}    end  end  function cartList:AppendStackItem(itemInfo, selectedCount)    local maxStack = itemInfo.maxStack    local cartListCount = STORE_MAX_CART_COL * STORE_MAX_CART_ROW    selectedCount = tonumber(selectedCount)    if GetCartEmptySlotCount(window.cartBag) == cartListCount then      cartList:AppendItem(itemInfo, selectedCount)      return    end    for i = 1, #window.cartBag do      local bag = window.cartBag[i]      if bag[1] ~= nil then        local item = cartList[i]        local curCount = bag[2]        local bagIndex = bag[1].goodIndex        local itemIndex = itemInfo.goodIndex        if bagIndex == itemIndex and maxStack > curCount then          local add = 0          local total = curCount + selectedCount          if maxStack < total then            add = total - maxStack          end          if 0 < add then            ChangedCartItemInfo(bag, item, maxStack)            cartList:AppendItem(itemInfo, add)          else            ChangedCartItemInfo(bag, item, total)          end          cmdWindow:TotalMoney()          return        end      end    end    cartList:AppendItem(itemInfo, selectedCount)  end  function cartList:AppendItem(itemInfo, stackCount)    local cartIndex = GetCartEmptySlotNumber()    if cartIndex == "full" then      X2Chat:DispatchChatMessage(CMF_TRADE_STORE_MSG, locale.store.cartNoSlot)      AddMessageToSysMsgWindow(locale.store.cartNoSlot)      return    end    if itemInfo == nil then      return    end    local item = cartList[cartIndex]    item:SetTooltip(itemInfo)    item:SetItemIcon(itemInfo.lookType, itemInfo.itemGrade)    item:SetStack(tostring(stackCount))    function item:OnClick(arg)      HideTooltip()      X2Store:ClearCursorOnStoreClose()      self:Init()      window.cartBag[cartIndex] = {}      cmdWindow:TotalMoney()    end    item:SetHandler("OnClick", item.OnClick)    window.cartBag[cartIndex] = {itemInfo, stackCount}    cmdWindow:TotalMoney()  end  function window:ClearItem(index)    local itemWindow = buyList[index]    itemWindow:Init()  end  function window:Init(show)    local maxItem = STORE_MAX_DEFAULT_ITEM_COLUMN * STORE_MAX_BUY_ROW    for i = 1, maxItem do      local item = buyList[i]      item:Init()      item:Show(show)    end  end  function window:AppendItem(index, itemInfo, itemIndex)    local item = buyList[index]    item:Show(true)    item:Update(itemInfo)    item:SetTooltip(itemInfo)    local button, icon = item:GetButton()    function button:OnClick(arg)      if itemInfo ~= nil and itemInfo.isStackable then        if arg == "LeftButton" and X2Input:IsShiftKeyDown() then          UseSpinner(itemInfo, itemInfo.maxStack)        else          cartList:AppendStackItem(itemInfo, 1)        end        return      end      cartList:AppendItem(itemInfo, 1)    end    button:SetHandler("OnClick", button.OnClick)    function icon:OnClickProc(arg)      button:OnClick(arg)    end  end  function window:Update(pageIndex)    local items = X2Store:GetStoreNpcItemList()	itemTable = items    if items == nil then      local parent = window:GetParent()      parent:Show(false)      return    end    local maxItem = STORE_MAX_DEFAULT_ITEM_COLUMN * STORE_MAX_BUY_ROW    local curItemIndex = (pageIndex or 0) * maxItem    local itemIndex = 1 + curItemIndex    for i = 1, maxItem do      local item = items[itemIndex]      self:ClearItem(i)      self:AppendItem(i, item, itemIndex)      itemIndex = itemIndex + 1    end  end  function window:PageInit()    local itemCount = X2Store:GetStoreNpcItemList(true)    if itemCount == nil then      return    end    local maxItem = STORE_MAX_DEFAULT_ITEM_COLUMN * STORE_MAX_BUY_ROW    pageControl:SetCurrentPage(1, false)    pageControl:SetPageByItemCount(itemCount, maxItem)    pageControl:Refresh()  end  function pageControl:OnPageChanged(pageIndex, countPerPage)    if self.maxPage == pageIndex then      window:Init(true)    end    window:Update(pageIndex - 1)  end  function spinner:Click()    local count = spinner:GetText()    cartList:AppendStackItem(spinner.itemInfo, count)  end  function searchEditbox:OnTextChanged()	local searchText = searchEditbox:GetText()	local searchTextLen = string.len(searchText)    if 1 <= searchTextLen then	  searchEditbox.guideText:Show(false)    end	if 0 == searchTextLen then	  searchEditbox.guideText:Show(true)	end	if nil ~= searchText and nil ~= itemTable then	  local newItemList = {}	  for  i = 1, #itemTable do		do		  if string.find(string.lower(itemTable[i].name), string.lower(searchText)) then			table.insert(newItemList, itemTable[i])		  end		end	  end	  local maxItem = STORE_MAX_DEFAULT_ITEM_COLUMN * STORE_MAX_BUY_ROW	  pageControl:SetCurrentPage(1, false)	  pageControl:SetPageByItemCount(#newItemList, maxItem)      pageControl:Refresh()	  for i = 1, maxItem do        window:ClearItem(i)		if i <= #newItemList then		  window:AppendItem(i, newItemList[i], #newItemList)				end      end	end	if nil == itemTable then	  local parent = window:GetParent()	  parent:Show(false)	  return	end  end  searchEditbox:SetHandler("OnTextChanged", searchEditbox.OnTextChanged)end